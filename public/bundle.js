/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/ticker.js":
/*!**************************!*\
  !*** ./public/ticker.js ***!
  \**************************/
/***/ (() => {

eval("\n// Function to handle form submission and add game record\nasync function handleSubmit(event) {\n  event.preventDefault();\n\n  const form = event.target;\n  const date = form.date.value;\n  const player1 = form.player1.value;\n  const player2 = form.player2.value;\n  const scorePlayer1 = parseInt(form.scorePlayer1.value);\n  const scorePlayer2 = parseInt(form.scorePlayer2.value);\n\n  if (isNaN(scorePlayer1) || isNaN(scorePlayer2)) {\n    alert('Please enter valid scores.');\n    return;\n  }\n\n  const winner = (scorePlayer1 > scorePlayer2) ? player1 : player2;\n\n  try {\n    // Call the Firebase Function to add the game record\n    await addGameRecord(date, player1, player2, scorePlayer1, scorePlayer2, winner);\n\n    // Refresh the scoreboard after adding the game record\n    await loadScoreBoard();\n  } catch (error) {\n    console.error('Failed to add game record:', error.message);\n  }\n}\n\n// Function to call the Firebase Function and add a new game record\nasync function addGameRecord(date, player1, player2, scorePlayer1, scorePlayer2, winner) {\n  try {\n    const response = await fetch('/addGameRecord', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        date: date,\n        player1: player1,\n        player2: player2,\n        scorePlayer1: scorePlayer1,\n        scorePlayer2: scorePlayer2,\n        winner: winner\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to add game record.');\n    }\n\n    const data = await response.json();\n    console.log('Game record added successfully:', data);\n  } catch (error) {\n    console.error('Error adding game record:', error.message);\n    throw error;\n  }\n}\n\n\n// Function to retrieve game records from Firebase Function\nasync function loadScoreBoard() {\n  try {\n    const response = await fetch('/getGameRecords', {\n      // Optional: If you have added a security check for the API key\n      // headers: {\n      //   'Authorization': 'YOUR_API_KEY'\n      // }\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch game records.');\n    }\n\n    const data = await response.json();\n    const scoreBoard = document.getElementById('score-board');\n    scoreBoard.innerHTML = '';\n\n    data.sort((a, b) => {\n      // Sort by date (oldest to newest)\n      const dateA = new Date(a.date);\n      const dateB = new Date(b.date);\n      if (dateA < dateB) return -1;\n      if (dateA > dateB) return 1;\n\n      // If dates are equal, sort by winner's name\n      if (a.winner < b.winner) return -1;\n      if (a.winner > b.winner) return 1;\n\n      // If both date and winner's name are equal, maintain original order\n      return 0;\n    });\n\n    data.forEach((game) => {\n      const row = document.createElement('tr');\n      row.innerHTML = `\n        <td>${game.date}</td>\n        <td>${game.player1}</td>\n        <td>${game.player2}</td>\n        <td>${game.scorePlayer1}</td>\n        <td>${game.scorePlayer2}</td>\n        <td class=\"winner\">${game.winner}</td>\n      `;\n\n      if (game.winner === game.player1) {\n        row.querySelector(':nth-child(2)').style.color = 'green'; // Player 1 is the winner\n        row.querySelector(':nth-child(3)').style.color = 'red'; // Player 2 is the loser\n      } else if (game.winner === game.player2) {\n        row.querySelector(':nth-child(2)').style.color = 'red'; // Player 1 is the loser\n        row.querySelector(':nth-child(3)').style.color = 'green'; // Player 2 is the winner\n      }\n\n      scoreBoard.appendChild(row);\n    });\n\n    console.log('Game records loaded successfully:', data);\n  } catch (error) {\n    console.error('Error fetching game records:', error.message);\n  }\n}\n\n  // Function to display each document in a tile\nasync function displayDocuments() {\n\n   try {\n      const response = await fetch('/getSummary', {\n       // Optional: If you have added a security check for the API key\n       // headers: {\n       //   'Authorization': 'YOUR_API_KEY'\n       // }\n     });\n\n     if (!response.ok) {\n       throw new Error('Failed to fetch summary records.');\n     }\n\n     const documents = await response.json();\n     console.log('Summary records loaded successfully:', documents);\n\n     const container = document.getElementById(\"documentContainer\");\n     for (const [id, data] of Object.entries(documents)) {\n       const tile = document.createElement(\"div\");\n       tile.className = \"tile\";\n\n       const header = document.createElement(\"div\");\n       header.className = \"header\";\n       header.textContent = `Document ID: ${id}`;\n       tile.appendChild(header);\n\n       for (const [key, value] of Object.entries(data)) {\n         const content = document.createElement(\"div\");\n         content.className = \"content\";\n         content.textContent = `${key}: ${value}`;\n         tile.appendChild(content);\n       }\n\n       container.appendChild(tile);\n     }\n   } catch (error) {\n    console.error('Error fetching game records:', error.message);\n  }\n}\n\n// Attach the handleSubmit function to the form submit event\ndocument.getElementById('game-form').addEventListener('submit', handleSubmit);\n\n// Load summary tiles\ndisplayDocuments()\n\n// Load the scoreboard on page load\nloadScoreBoard();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/ticker.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/ticker.js"]();
/******/ 	
/******/ })()
;