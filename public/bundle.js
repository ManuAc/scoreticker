/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/ticker.js":
/*!**************************!*\
  !*** ./public/ticker.js ***!
  \**************************/
/***/ (() => {

eval("// Function to add a game record\nfunction addGameRecord(gameData) {\n    fetch('/addGameRecord', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(gameData),\n    })\n    .then(response => {\n        console.log(\"Response for addGameRecord from Firebase:\", response);\n        return response.json();\n    })\n    .then(data => {\n        console.log(data)\n        \n        // Reload other sections\n        filterGamesByYear(2025);\n    })\n    .catch(error => console.error('Error adding game record:', error));\n}\n\n// Function to get game records\nfunction getGameRecords(year) {\n    fetch(`/getGameRecords?year=${year}`)\n    .then(response => {\n        console.log(\"Response for getGameRecords from Firebase:\", response);\n        return response.json();\n    })\n    .then(data => {\n        const gameTableBody = document.getElementById('gameTable').getElementsByTagName('tbody')[0];\n        gameTableBody.innerHTML = '';\n        data.forEach(record => {\n            const row = gameTableBody.insertRow();\n\n            const dateCell = row.insertCell();\n            const player1Cell = row.insertCell();\n            const player2Cell = row.insertCell();\n            const score1Cell = row.insertCell();\n            const score2Cell = row.insertCell();\n\n            dateCell.innerText = record.date;\n            player1Cell.innerText = record.player1;\n            player2Cell.innerText = record.player2;\n            score1Cell.innerText = record.score.player1;\n            score2Cell.innerText = record.score.player2;\n\n            // Add winner/loser styling\n            if (record.score.player1 > record.score.player2) {\n                player1Cell.classList.add('winner');\n                player2Cell.classList.add('loser');\n            } else {\n                player1Cell.classList.add('loser');\n                player2Cell.classList.add('winner');\n            }\n\n            dateCell.setAttribute('data-label', 'Date');\n            player1Cell.setAttribute('data-label', 'Player 1');\n            player2Cell.setAttribute('data-label', 'Player 2');\n            score1Cell.setAttribute('data-label', 'Score P1');\n            score2Cell.setAttribute('data-label', 'Score P2');\n        });\n    })\n    .catch(error => console.error('Error getting game records:', error));\n}\n\n// Function to get game summary\nfunction getGameSummary(year) {\n    // First get all games for last 10 calculation\n    Promise.all([\n        fetch(`/getSummary?year=${year}`).then(response => response.json()),\n        fetch(`/getGameRecords?year=`).then(response => response.json())\n    ])\n    .then(([summaryData, allGames]) => {\n        const processedSummaryData = {};\n        summaryData.forEach(record => {\n            if (!processedSummaryData[record.player]) {\n                processedSummaryData[record.player] = {\n                    player: record.player,\n                    opponents: []\n                };\n            }\n            processedSummaryData[record.player].opponents.push({\n                name: record.opponent,\n                gamesPlayed: record.gamesPlayed,\n                wins: record.wins,\n                losses: record.losses\n            });\n        });\n\n        const summaryGrid = document.getElementById(\"summaryGrid\");\n        summaryGrid.innerHTML = \"\";\n\n        // Add the leaderboard\n        const leaderboardHTML = generateLeaderboard(processedSummaryData, allGames);\n        const leaderboardHTMLDiv = document.createElement(\"div\");\n        leaderboardHTMLDiv.classList.add(\"player-summary\");\n        leaderboardHTMLDiv.innerHTML = leaderboardHTML;\n        summaryGrid.appendChild(leaderboardHTMLDiv);\n\n        // Add the player tabs\n        const playerTabs = document.getElementById(\"playerTabs\");\n        const tabsContainer = document.createElement(\"div\");\n        tabsContainer.classList.add(\"player-tabs-container\");\n        \n        // Create tabs header\n        const tabsHeader = document.createElement(\"div\");\n        tabsHeader.classList.add(\"tabs-header\");\n        tabsHeader.innerHTML = Object.values(processedSummaryData).map((playerSummary, index) => `\n            <button class=\"tab-button ${index === 0 ? 'active' : ''}\" \n                    data-player=\"${playerSummary.player}\">\n                ${playerSummary.player}\n            </button>\n        `).join('');\n\n        // Create tabs content\n        const tabsContent = document.createElement(\"div\");\n        tabsContent.classList.add(\"tabs-content\");\n        tabsContent.innerHTML = Object.values(processedSummaryData).map((playerSummary, index) => `\n            <div class=\"tab-content ${index === 0 ? 'active' : ''}\" \n                 id=\"tab-${playerSummary.player}\">\n                <table class=\"summary-table\">\n                    <thead>\n                        <tr>\n                            <th>Opponent</th>\n                            <th>Games</th>\n                            <th>Wins</th>\n                            <th>Losses</th>\n                            <th>Win %</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${playerSummary.opponents.map(opponent => `\n                            <tr>\n                                <td>${opponent.name}</td>\n                                <td>${opponent.gamesPlayed}</td>\n                                <td>${opponent.wins}</td>\n                                <td>${opponent.losses}</td>\n                                <td>${(opponent.wins / opponent.gamesPlayed * 100).toFixed(2)}%</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n        `).join('');\n\n        tabsContainer.appendChild(tabsHeader);\n        tabsContainer.appendChild(tabsContent);\n        playerTabs.innerHTML = ''; // Clear existing content\n        playerTabs.appendChild(tabsContainer);\n\n        // Add click handlers for tabs\n        document.querySelectorAll('.tab-button').forEach(button => {\n            button.addEventListener('click', () => {\n                document.querySelectorAll('.tab-button').forEach(btn => \n                    btn.classList.remove('active'));\n                document.querySelectorAll('.tab-content').forEach(content => \n                    content.classList.remove('active'));\n                \n                button.classList.add('active');\n                document.getElementById(`tab-${button.dataset.player}`).classList.add('active');\n            });\n        });\n    })\n    .catch(error => console.error('Error getting game summary:', error));\n}\n\n// Add this new function to calculate last 10 games performance\nfunction getLastTenGamesPerformance(player, allGames) {\n    // Get all games for this player (either as player1 or player2)\n    const playerGames = allGames\n        .filter(game => game.player1 === player || game.player2 === player)\n        .sort((a, b) => new Date(b.date) - new Date(a.date)) // Sort by date descending\n        .slice(0, 10); // Get last 10 games\n\n    // Count wins in these games\n    const wins = playerGames.filter(game => game.winner === player).length;\n    return `${wins}/${playerGames.length}`; // Format as \"wins/games\"\n}\n\n// Update the generateLeaderboard function\nfunction generateLeaderboard(playerSummaries, allGames) {\n    let overallData = [];\n\n    Object.values(playerSummaries).forEach(playerSummary => {\n        overallData.push({\n            player: playerSummary.player,\n            ...aggregateOverallData(playerSummary.opponents),\n            lastTen: getLastTenGamesPerformance(playerSummary.player, allGames)\n        });\n    });\n\n    // Sort by winPercentage desc\n    overallData.sort((a, b) => b.winPercentage - a.winPercentage);\n\n    let leaderboardHTML = `\n        <h2><i class=\"fas fa-crown\"></i> Power Rankings</h2>\n        <table class=\"summary-table\">\n            <thead>\n                <tr>\n                    <th>Player</th>\n                    <th>Games</th>\n                    <th>Wins</th>\n                    <th>Losses</th>\n                    <th>Win %</th>\n                    <th>Last 10</th>\n                </tr>\n            </thead>\n            <tbody>\n    `;\n\n    overallData.forEach((playerData, index) => {\n        const rankClass = index === 0 ? 'rank-gold' : \n                         index === 1 ? 'rank-silver' : \n                         index === 2 ? 'rank-bronze' : '';\n        const medalClass = index === 0 ? 'medal-gold' : \n                          index === 1 ? 'medal-silver' : \n                          index === 2 ? 'medal-bronze' : '';\n        \n        leaderboardHTML += `\n            <tr class=\"${rankClass}\">\n                <td data-label=\"Player\"><span class=\"${medalClass}\">${playerData.player}</span></td>\n                <td data-label=\"Games\">${playerData.totalGames}</td>\n                <td data-label=\"Wins\">${playerData.totalWins}</td>\n                <td data-label=\"Losses\">${playerData.totalLosses}</td>\n                <td data-label=\"Win %\">${playerData.winPercentage}%</td>\n                <td data-label=\"Last 10\">${playerData.lastTen}</td>\n            </tr>\n        `;\n    });\n\n    leaderboardHTML += `\n            </tbody>\n        </table>\n    `;\n\n    return leaderboardHTML;\n}\n\n// Assuming playerSummaries is an array containing player summary objects with per-opponent data\n// Function to aggregate per-opponent data to calculate overall statistics\nfunction aggregateOverallData(playerSummaries) {\n    // Initialize variables to store overall statistics\n    let totalGames = 0;\n    let totalWins = 0;\n    let totalLosses = 0;\n\n    // Iterate over each player summary to aggregate data\n    playerSummaries.forEach(playerSummary => {\n        // Increment total games\n        totalGames += playerSummary.gamesPlayed;\n\n        // Increment total wins\n        totalWins += playerSummary.wins;\n\n        // Increment total losses\n        totalLosses += playerSummary.losses;\n    });\n\n    // Calculate overall win percentage\n    const winPercentage = totalGames > 0 ? ((totalWins / totalGames) * 100).toFixed(2) : 0;\n\n    // Return an object containing the aggregated overall data\n    return {\n        totalGames,\n        totalWins,\n        totalLosses,\n        winPercentage\n    };\n}\n\nfunction filterGamesByYear(year) {\n    const yearParam = year >= 2025 ? year : '';\n    getGameRecords(yearParam);\n    getGameSummary(yearParam);\n\n    // Update active state of year buttons\n    document.getElementById('year2025').classList.toggle('active', year === 2025);\n    document.getElementById('year2024').classList.toggle('active', year === 2024);\n}\n\nfunction updatePlayerOptions() {\n    const player1Select = document.getElementById('player1');\n    const player2Select = document.getElementById('player2');\n    const player1Value = player1Select.value;\n    const player2Value = player2Select.value;\n\n    // Save to localStorage when values change\n    if (player1Value) localStorage.setItem('lastPlayer1', player1Value);\n    if (player2Value) localStorage.setItem('lastPlayer2', player2Value);\n\n    const allOptions = ['Akash', 'Aditya', 'Anurag', 'Bumbu', 'Karan', 'Htike', 'Manu', 'Rishabh', 'Sabari'];\n\n    player1Select.innerHTML = '<option value=\"\">Select Player 1</option>';\n    player2Select.innerHTML = '<option value=\"\">Select Player 2</option>';\n\n    allOptions.forEach(player => {\n        if (player !== player2Value) {\n            player1Select.innerHTML += `<option value=\"${player}\">${player}</option>`;\n        }\n        if (player !== player1Value) {\n            player2Select.innerHTML += `<option value=\"${player}\">${player}</option>`;\n        }\n    });\n\n    player1Select.value = player1Value;\n    player2Select.value = player2Value;\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Set default date to today\n    const today = new Date().toISOString().split('T')[0];\n    document.getElementById('date').value = today;\n    \n    // Set default scores to 21\n    document.getElementById('score1').value = \"21\";\n    document.getElementById('score2').value = \"21\";\n    \n    // Get last selected players from localStorage\n    const lastPlayer1 = localStorage.getItem('lastPlayer1');\n    const lastPlayer2 = localStorage.getItem('lastPlayer2');\n    \n    if (lastPlayer1) document.getElementById('player1').value = lastPlayer1;\n    if (lastPlayer2) document.getElementById('player2').value = lastPlayer2;\n    \n    document.getElementById('player1').addEventListener('change', updatePlayerOptions);\n    document.getElementById('player2').addEventListener('change', updatePlayerOptions);\n\n    document.getElementById('year2025').addEventListener('click', () => filterGamesByYear(2025));\n    document.getElementById('year2024').addEventListener('click', () => filterGamesByYear(2024));\n\n// Function to handle form submission\n    document.getElementById(\"gameForm\").addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n\n        let player1Name = formData.get(\"player1\")\n        let player2Name = formData.get(\"player2\")\n        let score1 = parseInt(formData.get(\"score1\"))\n        let score2 = parseInt(formData.get(\"score2\"))\n\n        const gameData = {\n            date: formData.get(\"date\"),\n            player1: player1Name,\n            player2: player2Name,\n            score: {\n                player1: score1,\n                player2: score2\n            },\n            winner: score1 > score2 ? player1Name : player2Name\n        };\n        // Call function to add game record\n        addGameRecord(gameData);\n\n        // Clear form fields after submission\n        e.target.reset();\n    });\n\n    // Initialize fetch functions\n    filterGamesByYear(2025);\n\n    // Add year select handler\n    document.getElementById('yearSelect').addEventListener('change', (e) => {\n        filterGamesByYear(parseInt(e.target.value));\n    });\n\n    // Set initial year in dropdown\n    document.getElementById('yearSelect').value = \"2025\";\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseURBQXlELE9BQU8sSUFBSSxPQUFPO0FBQzNFO0FBQ0E7QUFDQSx5REFBeUQsT0FBTyxJQUFJLE9BQU87QUFDM0U7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wdWJsaWMvdGlja2VyLmpzPzNiZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRnVuY3Rpb24gdG8gYWRkIGEgZ2FtZSByZWNvcmRcbmZ1bmN0aW9uIGFkZEdhbWVSZWNvcmQoZ2FtZURhdGEpIHtcbiAgICBmZXRjaCgnL2FkZEdhbWVSZWNvcmQnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShnYW1lRGF0YSksXG4gICAgfSlcbiAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmVzcG9uc2UgZm9yIGFkZEdhbWVSZWNvcmQgZnJvbSBGaXJlYmFzZTpcIiwgcmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0pXG4gICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXG4gICAgICAgIFxuICAgICAgICAvLyBSZWxvYWQgb3RoZXIgc2VjdGlvbnNcbiAgICAgICAgZmlsdGVyR2FtZXNCeVllYXIoMjAyNSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3IgYWRkaW5nIGdhbWUgcmVjb3JkOicsIGVycm9yKSk7XG59XG5cbi8vIEZ1bmN0aW9uIHRvIGdldCBnYW1lIHJlY29yZHNcbmZ1bmN0aW9uIGdldEdhbWVSZWNvcmRzKHllYXIpIHtcbiAgICBmZXRjaChgL2dldEdhbWVSZWNvcmRzP3llYXI9JHt5ZWFyfWApXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJlc3BvbnNlIGZvciBnZXRHYW1lUmVjb3JkcyBmcm9tIEZpcmViYXNlOlwiLCByZXNwb25zZSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgfSlcbiAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgY29uc3QgZ2FtZVRhYmxlQm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lVGFibGUnKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGJvZHknKVswXTtcbiAgICAgICAgZ2FtZVRhYmxlQm9keS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgZGF0YS5mb3JFYWNoKHJlY29yZCA9PiB7XG4gICAgICAgICAgICBjb25zdCByb3cgPSBnYW1lVGFibGVCb2R5Lmluc2VydFJvdygpO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRlQ2VsbCA9IHJvdy5pbnNlcnRDZWxsKCk7XG4gICAgICAgICAgICBjb25zdCBwbGF5ZXIxQ2VsbCA9IHJvdy5pbnNlcnRDZWxsKCk7XG4gICAgICAgICAgICBjb25zdCBwbGF5ZXIyQ2VsbCA9IHJvdy5pbnNlcnRDZWxsKCk7XG4gICAgICAgICAgICBjb25zdCBzY29yZTFDZWxsID0gcm93Lmluc2VydENlbGwoKTtcbiAgICAgICAgICAgIGNvbnN0IHNjb3JlMkNlbGwgPSByb3cuaW5zZXJ0Q2VsbCgpO1xuXG4gICAgICAgICAgICBkYXRlQ2VsbC5pbm5lclRleHQgPSByZWNvcmQuZGF0ZTtcbiAgICAgICAgICAgIHBsYXllcjFDZWxsLmlubmVyVGV4dCA9IHJlY29yZC5wbGF5ZXIxO1xuICAgICAgICAgICAgcGxheWVyMkNlbGwuaW5uZXJUZXh0ID0gcmVjb3JkLnBsYXllcjI7XG4gICAgICAgICAgICBzY29yZTFDZWxsLmlubmVyVGV4dCA9IHJlY29yZC5zY29yZS5wbGF5ZXIxO1xuICAgICAgICAgICAgc2NvcmUyQ2VsbC5pbm5lclRleHQgPSByZWNvcmQuc2NvcmUucGxheWVyMjtcblxuICAgICAgICAgICAgLy8gQWRkIHdpbm5lci9sb3NlciBzdHlsaW5nXG4gICAgICAgICAgICBpZiAocmVjb3JkLnNjb3JlLnBsYXllcjEgPiByZWNvcmQuc2NvcmUucGxheWVyMikge1xuICAgICAgICAgICAgICAgIHBsYXllcjFDZWxsLmNsYXNzTGlzdC5hZGQoJ3dpbm5lcicpO1xuICAgICAgICAgICAgICAgIHBsYXllcjJDZWxsLmNsYXNzTGlzdC5hZGQoJ2xvc2VyJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBsYXllcjFDZWxsLmNsYXNzTGlzdC5hZGQoJ2xvc2VyJyk7XG4gICAgICAgICAgICAgICAgcGxheWVyMkNlbGwuY2xhc3NMaXN0LmFkZCgnd2lubmVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGVDZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS1sYWJlbCcsICdEYXRlJyk7XG4gICAgICAgICAgICBwbGF5ZXIxQ2VsbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnLCAnUGxheWVyIDEnKTtcbiAgICAgICAgICAgIHBsYXllcjJDZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS1sYWJlbCcsICdQbGF5ZXIgMicpO1xuICAgICAgICAgICAgc2NvcmUxQ2VsbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnLCAnU2NvcmUgUDEnKTtcbiAgICAgICAgICAgIHNjb3JlMkNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLWxhYmVsJywgJ1Njb3JlIFAyJyk7XG4gICAgICAgIH0pO1xuICAgIH0pXG4gICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgZ2FtZSByZWNvcmRzOicsIGVycm9yKSk7XG59XG5cbi8vIEZ1bmN0aW9uIHRvIGdldCBnYW1lIHN1bW1hcnlcbmZ1bmN0aW9uIGdldEdhbWVTdW1tYXJ5KHllYXIpIHtcbiAgICAvLyBGaXJzdCBnZXQgYWxsIGdhbWVzIGZvciBsYXN0IDEwIGNhbGN1bGF0aW9uXG4gICAgUHJvbWlzZS5hbGwoW1xuICAgICAgICBmZXRjaChgL2dldFN1bW1hcnk/eWVhcj0ke3llYXJ9YCkudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpLFxuICAgICAgICBmZXRjaChgL2dldEdhbWVSZWNvcmRzP3llYXI9YCkudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgXSlcbiAgICAudGhlbigoW3N1bW1hcnlEYXRhLCBhbGxHYW1lc10pID0+IHtcbiAgICAgICAgY29uc3QgcHJvY2Vzc2VkU3VtbWFyeURhdGEgPSB7fTtcbiAgICAgICAgc3VtbWFyeURhdGEuZm9yRWFjaChyZWNvcmQgPT4ge1xuICAgICAgICAgICAgaWYgKCFwcm9jZXNzZWRTdW1tYXJ5RGF0YVtyZWNvcmQucGxheWVyXSkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NlZFN1bW1hcnlEYXRhW3JlY29yZC5wbGF5ZXJdID0ge1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHJlY29yZC5wbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgIG9wcG9uZW50czogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvY2Vzc2VkU3VtbWFyeURhdGFbcmVjb3JkLnBsYXllcl0ub3Bwb25lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlY29yZC5vcHBvbmVudCxcbiAgICAgICAgICAgICAgICBnYW1lc1BsYXllZDogcmVjb3JkLmdhbWVzUGxheWVkLFxuICAgICAgICAgICAgICAgIHdpbnM6IHJlY29yZC53aW5zLFxuICAgICAgICAgICAgICAgIGxvc3NlczogcmVjb3JkLmxvc3Nlc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHN1bW1hcnlHcmlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdW1tYXJ5R3JpZFwiKTtcbiAgICAgICAgc3VtbWFyeUdyaWQuaW5uZXJIVE1MID0gXCJcIjtcblxuICAgICAgICAvLyBBZGQgdGhlIGxlYWRlcmJvYXJkXG4gICAgICAgIGNvbnN0IGxlYWRlcmJvYXJkSFRNTCA9IGdlbmVyYXRlTGVhZGVyYm9hcmQocHJvY2Vzc2VkU3VtbWFyeURhdGEsIGFsbEdhbWVzKTtcbiAgICAgICAgY29uc3QgbGVhZGVyYm9hcmRIVE1MRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbGVhZGVyYm9hcmRIVE1MRGl2LmNsYXNzTGlzdC5hZGQoXCJwbGF5ZXItc3VtbWFyeVwiKTtcbiAgICAgICAgbGVhZGVyYm9hcmRIVE1MRGl2LmlubmVySFRNTCA9IGxlYWRlcmJvYXJkSFRNTDtcbiAgICAgICAgc3VtbWFyeUdyaWQuYXBwZW5kQ2hpbGQobGVhZGVyYm9hcmRIVE1MRGl2KTtcblxuICAgICAgICAvLyBBZGQgdGhlIHBsYXllciB0YWJzXG4gICAgICAgIGNvbnN0IHBsYXllclRhYnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXllclRhYnNcIik7XG4gICAgICAgIGNvbnN0IHRhYnNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0YWJzQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJwbGF5ZXItdGFicy1jb250YWluZXJcIik7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgdGFicyBoZWFkZXJcbiAgICAgICAgY29uc3QgdGFic0hlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRhYnNIZWFkZXIuY2xhc3NMaXN0LmFkZChcInRhYnMtaGVhZGVyXCIpO1xuICAgICAgICB0YWJzSGVhZGVyLmlubmVySFRNTCA9IE9iamVjdC52YWx1ZXMocHJvY2Vzc2VkU3VtbWFyeURhdGEpLm1hcCgocGxheWVyU3VtbWFyeSwgaW5kZXgpID0+IGBcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0YWItYnV0dG9uICR7aW5kZXggPT09IDAgPyAnYWN0aXZlJyA6ICcnfVwiIFxuICAgICAgICAgICAgICAgICAgICBkYXRhLXBsYXllcj1cIiR7cGxheWVyU3VtbWFyeS5wbGF5ZXJ9XCI+XG4gICAgICAgICAgICAgICAgJHtwbGF5ZXJTdW1tYXJ5LnBsYXllcn1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBgKS5qb2luKCcnKTtcblxuICAgICAgICAvLyBDcmVhdGUgdGFicyBjb250ZW50XG4gICAgICAgIGNvbnN0IHRhYnNDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGFic0NvbnRlbnQuY2xhc3NMaXN0LmFkZChcInRhYnMtY29udGVudFwiKTtcbiAgICAgICAgdGFic0NvbnRlbnQuaW5uZXJIVE1MID0gT2JqZWN0LnZhbHVlcyhwcm9jZXNzZWRTdW1tYXJ5RGF0YSkubWFwKChwbGF5ZXJTdW1tYXJ5LCBpbmRleCkgPT4gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50ICR7aW5kZXggPT09IDAgPyAnYWN0aXZlJyA6ICcnfVwiIFxuICAgICAgICAgICAgICAgICBpZD1cInRhYi0ke3BsYXllclN1bW1hcnkucGxheWVyfVwiPlxuICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInN1bW1hcnktdGFibGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5PcHBvbmVudDwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkdhbWVzPC90aD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+V2luczwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkxvc3NlczwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPldpbiAlPC90aD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICAgICAgICAgICR7cGxheWVyU3VtbWFyeS5vcHBvbmVudHMubWFwKG9wcG9uZW50ID0+IGBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4ke29wcG9uZW50Lm5hbWV9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiR7b3Bwb25lbnQuZ2FtZXNQbGF5ZWR9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiR7b3Bwb25lbnQud2luc308L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JHtvcHBvbmVudC5sb3NzZXN9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiR7KG9wcG9uZW50LndpbnMgLyBvcHBvbmVudC5nYW1lc1BsYXllZCAqIDEwMCkudG9GaXhlZCgyKX0lPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICAgICAgYCkuam9pbignJyl9XG4gICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgKS5qb2luKCcnKTtcblxuICAgICAgICB0YWJzQ29udGFpbmVyLmFwcGVuZENoaWxkKHRhYnNIZWFkZXIpO1xuICAgICAgICB0YWJzQ29udGFpbmVyLmFwcGVuZENoaWxkKHRhYnNDb250ZW50KTtcbiAgICAgICAgcGxheWVyVGFicy5pbm5lckhUTUwgPSAnJzsgLy8gQ2xlYXIgZXhpc3RpbmcgY29udGVudFxuICAgICAgICBwbGF5ZXJUYWJzLmFwcGVuZENoaWxkKHRhYnNDb250YWluZXIpO1xuXG4gICAgICAgIC8vIEFkZCBjbGljayBoYW5kbGVycyBmb3IgdGFic1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLWJ1dHRvbicpLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLWJ1dHRvbicpLmZvckVhY2goYnRuID0+IFxuICAgICAgICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YWItY29udGVudCcpLmZvckVhY2goY29udGVudCA9PiBcbiAgICAgICAgICAgICAgICAgICAgY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB0YWItJHtidXR0b24uZGF0YXNldC5wbGF5ZXJ9YCkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBnYW1lIHN1bW1hcnk6JywgZXJyb3IpKTtcbn1cblxuLy8gQWRkIHRoaXMgbmV3IGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBsYXN0IDEwIGdhbWVzIHBlcmZvcm1hbmNlXG5mdW5jdGlvbiBnZXRMYXN0VGVuR2FtZXNQZXJmb3JtYW5jZShwbGF5ZXIsIGFsbEdhbWVzKSB7XG4gICAgLy8gR2V0IGFsbCBnYW1lcyBmb3IgdGhpcyBwbGF5ZXIgKGVpdGhlciBhcyBwbGF5ZXIxIG9yIHBsYXllcjIpXG4gICAgY29uc3QgcGxheWVyR2FtZXMgPSBhbGxHYW1lc1xuICAgICAgICAuZmlsdGVyKGdhbWUgPT4gZ2FtZS5wbGF5ZXIxID09PSBwbGF5ZXIgfHwgZ2FtZS5wbGF5ZXIyID09PSBwbGF5ZXIpXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShiLmRhdGUpIC0gbmV3IERhdGUoYS5kYXRlKSkgLy8gU29ydCBieSBkYXRlIGRlc2NlbmRpbmdcbiAgICAgICAgLnNsaWNlKDAsIDEwKTsgLy8gR2V0IGxhc3QgMTAgZ2FtZXNcblxuICAgIC8vIENvdW50IHdpbnMgaW4gdGhlc2UgZ2FtZXNcbiAgICBjb25zdCB3aW5zID0gcGxheWVyR2FtZXMuZmlsdGVyKGdhbWUgPT4gZ2FtZS53aW5uZXIgPT09IHBsYXllcikubGVuZ3RoO1xuICAgIHJldHVybiBgJHt3aW5zfS8ke3BsYXllckdhbWVzLmxlbmd0aH1gOyAvLyBGb3JtYXQgYXMgXCJ3aW5zL2dhbWVzXCJcbn1cblxuLy8gVXBkYXRlIHRoZSBnZW5lcmF0ZUxlYWRlcmJvYXJkIGZ1bmN0aW9uXG5mdW5jdGlvbiBnZW5lcmF0ZUxlYWRlcmJvYXJkKHBsYXllclN1bW1hcmllcywgYWxsR2FtZXMpIHtcbiAgICBsZXQgb3ZlcmFsbERhdGEgPSBbXTtcblxuICAgIE9iamVjdC52YWx1ZXMocGxheWVyU3VtbWFyaWVzKS5mb3JFYWNoKHBsYXllclN1bW1hcnkgPT4ge1xuICAgICAgICBvdmVyYWxsRGF0YS5wdXNoKHtcbiAgICAgICAgICAgIHBsYXllcjogcGxheWVyU3VtbWFyeS5wbGF5ZXIsXG4gICAgICAgICAgICAuLi5hZ2dyZWdhdGVPdmVyYWxsRGF0YShwbGF5ZXJTdW1tYXJ5Lm9wcG9uZW50cyksXG4gICAgICAgICAgICBsYXN0VGVuOiBnZXRMYXN0VGVuR2FtZXNQZXJmb3JtYW5jZShwbGF5ZXJTdW1tYXJ5LnBsYXllciwgYWxsR2FtZXMpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gU29ydCBieSB3aW5QZXJjZW50YWdlIGRlc2NcbiAgICBvdmVyYWxsRGF0YS5zb3J0KChhLCBiKSA9PiBiLndpblBlcmNlbnRhZ2UgLSBhLndpblBlcmNlbnRhZ2UpO1xuXG4gICAgbGV0IGxlYWRlcmJvYXJkSFRNTCA9IGBcbiAgICAgICAgPGgyPjxpIGNsYXNzPVwiZmFzIGZhLWNyb3duXCI+PC9pPiBQb3dlciBSYW5raW5nczwvaDI+XG4gICAgICAgIDx0YWJsZSBjbGFzcz1cInN1bW1hcnktdGFibGVcIj5cbiAgICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0aD5QbGF5ZXI8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGg+R2FtZXM8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGg+V2luczwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0aD5Mb3NzZXM8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGg+V2luICU8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGg+TGFzdCAxMDwvdGg+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICA8dGJvZHk+XG4gICAgYDtcblxuICAgIG92ZXJhbGxEYXRhLmZvckVhY2goKHBsYXllckRhdGEsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHJhbmtDbGFzcyA9IGluZGV4ID09PSAwID8gJ3JhbmstZ29sZCcgOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9PT0gMSA/ICdyYW5rLXNpbHZlcicgOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9PT0gMiA/ICdyYW5rLWJyb256ZScgOiAnJztcbiAgICAgICAgY29uc3QgbWVkYWxDbGFzcyA9IGluZGV4ID09PSAwID8gJ21lZGFsLWdvbGQnIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID09PSAxID8gJ21lZGFsLXNpbHZlcicgOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPT09IDIgPyAnbWVkYWwtYnJvbnplJyA6ICcnO1xuICAgICAgICBcbiAgICAgICAgbGVhZGVyYm9hcmRIVE1MICs9IGBcbiAgICAgICAgICAgIDx0ciBjbGFzcz1cIiR7cmFua0NsYXNzfVwiPlxuICAgICAgICAgICAgICAgIDx0ZCBkYXRhLWxhYmVsPVwiUGxheWVyXCI+PHNwYW4gY2xhc3M9XCIke21lZGFsQ2xhc3N9XCI+JHtwbGF5ZXJEYXRhLnBsYXllcn08L3NwYW4+PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQgZGF0YS1sYWJlbD1cIkdhbWVzXCI+JHtwbGF5ZXJEYXRhLnRvdGFsR2FtZXN9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQgZGF0YS1sYWJlbD1cIldpbnNcIj4ke3BsYXllckRhdGEudG90YWxXaW5zfTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9XCJMb3NzZXNcIj4ke3BsYXllckRhdGEudG90YWxMb3NzZXN9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQgZGF0YS1sYWJlbD1cIldpbiAlXCI+JHtwbGF5ZXJEYXRhLndpblBlcmNlbnRhZ2V9JTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9XCJMYXN0IDEwXCI+JHtwbGF5ZXJEYXRhLmxhc3RUZW59PC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgIGA7XG4gICAgfSk7XG5cbiAgICBsZWFkZXJib2FyZEhUTUwgKz0gYFxuICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICBgO1xuXG4gICAgcmV0dXJuIGxlYWRlcmJvYXJkSFRNTDtcbn1cblxuLy8gQXNzdW1pbmcgcGxheWVyU3VtbWFyaWVzIGlzIGFuIGFycmF5IGNvbnRhaW5pbmcgcGxheWVyIHN1bW1hcnkgb2JqZWN0cyB3aXRoIHBlci1vcHBvbmVudCBkYXRhXG4vLyBGdW5jdGlvbiB0byBhZ2dyZWdhdGUgcGVyLW9wcG9uZW50IGRhdGEgdG8gY2FsY3VsYXRlIG92ZXJhbGwgc3RhdGlzdGljc1xuZnVuY3Rpb24gYWdncmVnYXRlT3ZlcmFsbERhdGEocGxheWVyU3VtbWFyaWVzKSB7XG4gICAgLy8gSW5pdGlhbGl6ZSB2YXJpYWJsZXMgdG8gc3RvcmUgb3ZlcmFsbCBzdGF0aXN0aWNzXG4gICAgbGV0IHRvdGFsR2FtZXMgPSAwO1xuICAgIGxldCB0b3RhbFdpbnMgPSAwO1xuICAgIGxldCB0b3RhbExvc3NlcyA9IDA7XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgZWFjaCBwbGF5ZXIgc3VtbWFyeSB0byBhZ2dyZWdhdGUgZGF0YVxuICAgIHBsYXllclN1bW1hcmllcy5mb3JFYWNoKHBsYXllclN1bW1hcnkgPT4ge1xuICAgICAgICAvLyBJbmNyZW1lbnQgdG90YWwgZ2FtZXNcbiAgICAgICAgdG90YWxHYW1lcyArPSBwbGF5ZXJTdW1tYXJ5LmdhbWVzUGxheWVkO1xuXG4gICAgICAgIC8vIEluY3JlbWVudCB0b3RhbCB3aW5zXG4gICAgICAgIHRvdGFsV2lucyArPSBwbGF5ZXJTdW1tYXJ5LndpbnM7XG5cbiAgICAgICAgLy8gSW5jcmVtZW50IHRvdGFsIGxvc3Nlc1xuICAgICAgICB0b3RhbExvc3NlcyArPSBwbGF5ZXJTdW1tYXJ5Lmxvc3NlcztcbiAgICB9KTtcblxuICAgIC8vIENhbGN1bGF0ZSBvdmVyYWxsIHdpbiBwZXJjZW50YWdlXG4gICAgY29uc3Qgd2luUGVyY2VudGFnZSA9IHRvdGFsR2FtZXMgPiAwID8gKCh0b3RhbFdpbnMgLyB0b3RhbEdhbWVzKSAqIDEwMCkudG9GaXhlZCgyKSA6IDA7XG5cbiAgICAvLyBSZXR1cm4gYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGFnZ3JlZ2F0ZWQgb3ZlcmFsbCBkYXRhXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG90YWxHYW1lcyxcbiAgICAgICAgdG90YWxXaW5zLFxuICAgICAgICB0b3RhbExvc3NlcyxcbiAgICAgICAgd2luUGVyY2VudGFnZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGZpbHRlckdhbWVzQnlZZWFyKHllYXIpIHtcbiAgICBjb25zdCB5ZWFyUGFyYW0gPSB5ZWFyID49IDIwMjUgPyB5ZWFyIDogJyc7XG4gICAgZ2V0R2FtZVJlY29yZHMoeWVhclBhcmFtKTtcbiAgICBnZXRHYW1lU3VtbWFyeSh5ZWFyUGFyYW0pO1xuXG4gICAgLy8gVXBkYXRlIGFjdGl2ZSBzdGF0ZSBvZiB5ZWFyIGJ1dHRvbnNcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgneWVhcjIwMjUnKS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCB5ZWFyID09PSAyMDI1KTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgneWVhcjIwMjQnKS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCB5ZWFyID09PSAyMDI0KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUGxheWVyT3B0aW9ucygpIHtcbiAgICBjb25zdCBwbGF5ZXIxU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllcjEnKTtcbiAgICBjb25zdCBwbGF5ZXIyU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllcjInKTtcbiAgICBjb25zdCBwbGF5ZXIxVmFsdWUgPSBwbGF5ZXIxU2VsZWN0LnZhbHVlO1xuICAgIGNvbnN0IHBsYXllcjJWYWx1ZSA9IHBsYXllcjJTZWxlY3QudmFsdWU7XG5cbiAgICAvLyBTYXZlIHRvIGxvY2FsU3RvcmFnZSB3aGVuIHZhbHVlcyBjaGFuZ2VcbiAgICBpZiAocGxheWVyMVZhbHVlKSBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFzdFBsYXllcjEnLCBwbGF5ZXIxVmFsdWUpO1xuICAgIGlmIChwbGF5ZXIyVmFsdWUpIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsYXN0UGxheWVyMicsIHBsYXllcjJWYWx1ZSk7XG5cbiAgICBjb25zdCBhbGxPcHRpb25zID0gWydBa2FzaCcsICdBZGl0eWEnLCAnQW51cmFnJywgJ0J1bWJ1JywgJ0thcmFuJywgJ0h0aWtlJywgJ01hbnUnLCAnUmlzaGFiaCcsICdTYWJhcmknXTtcblxuICAgIHBsYXllcjFTZWxlY3QuaW5uZXJIVE1MID0gJzxvcHRpb24gdmFsdWU9XCJcIj5TZWxlY3QgUGxheWVyIDE8L29wdGlvbj4nO1xuICAgIHBsYXllcjJTZWxlY3QuaW5uZXJIVE1MID0gJzxvcHRpb24gdmFsdWU9XCJcIj5TZWxlY3QgUGxheWVyIDI8L29wdGlvbj4nO1xuXG4gICAgYWxsT3B0aW9ucy5mb3JFYWNoKHBsYXllciA9PiB7XG4gICAgICAgIGlmIChwbGF5ZXIgIT09IHBsYXllcjJWYWx1ZSkge1xuICAgICAgICAgICAgcGxheWVyMVNlbGVjdC5pbm5lckhUTUwgKz0gYDxvcHRpb24gdmFsdWU9XCIke3BsYXllcn1cIj4ke3BsYXllcn08L29wdGlvbj5gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwbGF5ZXIgIT09IHBsYXllcjFWYWx1ZSkge1xuICAgICAgICAgICAgcGxheWVyMlNlbGVjdC5pbm5lckhUTUwgKz0gYDxvcHRpb24gdmFsdWU9XCIke3BsYXllcn1cIj4ke3BsYXllcn08L29wdGlvbj5gO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBwbGF5ZXIxU2VsZWN0LnZhbHVlID0gcGxheWVyMVZhbHVlO1xuICAgIHBsYXllcjJTZWxlY3QudmFsdWUgPSBwbGF5ZXIyVmFsdWU7XG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcbiAgICAvLyBTZXQgZGVmYXVsdCBkYXRlIHRvIHRvZGF5XG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGF0ZScpLnZhbHVlID0gdG9kYXk7XG4gICAgXG4gICAgLy8gU2V0IGRlZmF1bHQgc2NvcmVzIHRvIDIxXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Njb3JlMScpLnZhbHVlID0gXCIyMVwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY29yZTInKS52YWx1ZSA9IFwiMjFcIjtcbiAgICBcbiAgICAvLyBHZXQgbGFzdCBzZWxlY3RlZCBwbGF5ZXJzIGZyb20gbG9jYWxTdG9yYWdlXG4gICAgY29uc3QgbGFzdFBsYXllcjEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFzdFBsYXllcjEnKTtcbiAgICBjb25zdCBsYXN0UGxheWVyMiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYXN0UGxheWVyMicpO1xuICAgIFxuICAgIGlmIChsYXN0UGxheWVyMSkgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllcjEnKS52YWx1ZSA9IGxhc3RQbGF5ZXIxO1xuICAgIGlmIChsYXN0UGxheWVyMikgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllcjInKS52YWx1ZSA9IGxhc3RQbGF5ZXIyO1xuICAgIFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXIxJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdXBkYXRlUGxheWVyT3B0aW9ucyk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllcjInKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVQbGF5ZXJPcHRpb25zKTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd5ZWFyMjAyNScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gZmlsdGVyR2FtZXNCeVllYXIoMjAyNSkpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd5ZWFyMjAyNCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gZmlsdGVyR2FtZXNCeVllYXIoMjAyNCkpO1xuXG4vLyBGdW5jdGlvbiB0byBoYW5kbGUgZm9ybSBzdWJtaXNzaW9uXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnYW1lRm9ybVwiKS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZS50YXJnZXQpO1xuXG4gICAgICAgIGxldCBwbGF5ZXIxTmFtZSA9IGZvcm1EYXRhLmdldChcInBsYXllcjFcIilcbiAgICAgICAgbGV0IHBsYXllcjJOYW1lID0gZm9ybURhdGEuZ2V0KFwicGxheWVyMlwiKVxuICAgICAgICBsZXQgc2NvcmUxID0gcGFyc2VJbnQoZm9ybURhdGEuZ2V0KFwic2NvcmUxXCIpKVxuICAgICAgICBsZXQgc2NvcmUyID0gcGFyc2VJbnQoZm9ybURhdGEuZ2V0KFwic2NvcmUyXCIpKVxuXG4gICAgICAgIGNvbnN0IGdhbWVEYXRhID0ge1xuICAgICAgICAgICAgZGF0ZTogZm9ybURhdGEuZ2V0KFwiZGF0ZVwiKSxcbiAgICAgICAgICAgIHBsYXllcjE6IHBsYXllcjFOYW1lLFxuICAgICAgICAgICAgcGxheWVyMjogcGxheWVyMk5hbWUsXG4gICAgICAgICAgICBzY29yZToge1xuICAgICAgICAgICAgICAgIHBsYXllcjE6IHNjb3JlMSxcbiAgICAgICAgICAgICAgICBwbGF5ZXIyOiBzY29yZTJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aW5uZXI6IHNjb3JlMSA+IHNjb3JlMiA/IHBsYXllcjFOYW1lIDogcGxheWVyMk5hbWVcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ2FsbCBmdW5jdGlvbiB0byBhZGQgZ2FtZSByZWNvcmRcbiAgICAgICAgYWRkR2FtZVJlY29yZChnYW1lRGF0YSk7XG5cbiAgICAgICAgLy8gQ2xlYXIgZm9ybSBmaWVsZHMgYWZ0ZXIgc3VibWlzc2lvblxuICAgICAgICBlLnRhcmdldC5yZXNldCgpO1xuICAgIH0pO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBmZXRjaCBmdW5jdGlvbnNcbiAgICBmaWx0ZXJHYW1lc0J5WWVhcigyMDI1KTtcblxuICAgIC8vIEFkZCB5ZWFyIHNlbGVjdCBoYW5kbGVyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3llYXJTZWxlY3QnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgICAgICBmaWx0ZXJHYW1lc0J5WWVhcihwYXJzZUludChlLnRhcmdldC52YWx1ZSkpO1xuICAgIH0pO1xuXG4gICAgLy8gU2V0IGluaXRpYWwgeWVhciBpbiBkcm9wZG93blxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd5ZWFyU2VsZWN0JykudmFsdWUgPSBcIjIwMjVcIjtcbn0pO1xuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./public/ticker.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/ticker.js"]();
/******/ 	
/******/ })()
;