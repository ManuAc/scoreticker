/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/ticker.js":
/*!**************************!*\
  !*** ./public/ticker.js ***!
  \**************************/
/***/ (() => {

eval("// Function to add a game record\nfunction addGameRecord(gameData) {\n    fetch('/addGameRecord', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(gameData),\n    })\n    .then(response => {\n        console.log(\"Response for addGameRecord from Firebase:\", response);\n        return response.json();\n    })\n    .then(data => {\n        console.log(data)\n            // Reload other sections\n        getGameRecords();\n\n        getGameSummary();\n    })\n    .catch(error => console.error('Error adding game record:', error));\n}\n\n// Function to get game records\nfunction getGameRecords() {\n    fetch('/getGameRecords')\n    .then(response => {\n        console.log(\"Response for getGameRecords from Firebase:\", response);\n        return response.json();\n    })\n    .then(data => {\n        const gameTableBody = document.getElementById('gameTable').getElementsByTagName('tbody')[0];\n        gameTableBody.innerHTML = '';\n        data.forEach(record => {\n            const row = gameTableBody.insertRow();\n\n            const dateCell = row.insertCell();\n            const player1Cell = row.insertCell();\n            const player2Cell = row.insertCell();\n            const score1Cell = row.insertCell();\n            const score2Cell = row.insertCell();\n            const winnerCell = row.insertCell();\n\n            dateCell.innerText = record.date;\n            player1Cell.innerText = record.player1;\n            player2Cell.innerText = record.player2;\n            score1Cell.innerText = record.score.player1;\n            score2Cell.innerText = record.score.player2;\n            winnerCell.innerText = record.winner;\n\n            if (record.winner === record.player1) {\n                player1Cell.classList.add('winner');\n                player2Cell.classList.add('loser');\n                winnerCell.classList.add('winner');\n            } else {\n                player1Cell.classList.add('loser');\n                player2Cell.classList.add('winner');\n                winnerCell.classList.add('winner');\n            }\n        });\n    })\n    .catch(error => console.error('Error getting game records:', error));\n}\n\n// Function to get game summary\nfunction getGameSummary() {\n    fetch('/getSummary')\n    .then(response => {\n        console.log(\"Response for getSummary from Firebase:\", response);\n        return response.json();\n    })\n    .then(data => {\n        const summaryData = {};\n        data.forEach(record => {\n            if (!summaryData[record.player]) {\n                summaryData[record.player] = {\n                    player: record.player,\n                    opponents: []\n                };\n            }\n            summaryData[record.player].opponents.push({\n                name: record.opponent,\n                gamesPlayed: record.gamesPlayed,\n                wins: record.wins,\n                losses: record.losses\n            });\n        });\n\n        const summaryGrid = document.getElementById(\"summaryGrid\");\n        summaryGrid.innerHTML = \"\";\n\n        // Leaderboard section\n        const leaderboardHTML = generateLeaderboard(summaryData)\n        const leaderboardHTMLDiv = document.createElement(\"div\");\n        leaderboardHTMLDiv.classList.add(\"player-summary\");\n        leaderboardHTMLDiv.innerHTML = leaderboardHTML\n\n        summaryGrid.appendChild(leaderboardHTMLDiv);\n\n        // Player summary section\n        Object.values(summaryData).forEach(playerSummary => {\n            const playerSummaryDiv = document.createElement(\"div\");\n            playerSummaryDiv.classList.add(\"player-summary\");\n            playerSummaryDiv.innerHTML = `\n                <h3>${playerSummary.player}</h3><br/>\n                <table class=\"summary-table\">\n                    <thead>\n                        <tr>\n                            <th>Opponent</th>\n                            <th>Games Played</th>\n                            <th>Wins</th>\n                            <th>Losses</th>\n                            <th>Win %</th>\n                            <th>Winning Trend</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${playerSummary.opponents.map(opponent => `\n                            <tr>\n                                <td>${opponent.name}</td>\n                                <td>${opponent.gamesPlayed}</td>\n                                <td>${opponent.wins}</td>\n                                <td>${opponent.losses}</td>\n                                <td>${(opponent.wins / opponent.gamesPlayed * 100).toFixed(2)}%</td>\n                                <td>\n                                    <div class=\"bar\" style=\"--win-percentage: ${(opponent.wins / opponent.gamesPlayed * 100)}%;\">\n                                        <div class=\"bar-fill\"></div>\n                                    </div>\n                                </td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            `;\n            summaryGrid.appendChild(playerSummaryDiv);\n        });\n    })\n    .catch(error => console.error('Error getting game summary:', error));\n}\n\n\n// Assuming playerSummaries is an array containing player summary objects with per-opponent data\n// Function to aggregate per-opponent data to calculate overall statistics\nfunction aggregateOverallData(playerSummaries) {\n    // Initialize variables to store overall statistics\n    let totalGames = 0;\n    let totalWins = 0;\n    let totalLosses = 0;\n\n    // Iterate over each player summary to aggregate data\n    playerSummaries.forEach(playerSummary => {\n        // Increment total games\n        totalGames += playerSummary.gamesPlayed;\n\n        // Increment total wins\n        totalWins += playerSummary.wins;\n\n        // Increment total losses\n        totalLosses += playerSummary.losses;\n    });\n\n    // Calculate overall win percentage\n    const winPercentage = totalGames > 0 ? ((totalWins / totalGames) * 100).toFixed(2) : 0;\n\n    // Return an object containing the aggregated overall data\n    return {\n        totalGames,\n        totalWins,\n        totalLosses,\n        winPercentage\n    };\n}\n\n// Function to generate leaderboard HTML\nfunction generateLeaderboard(playerSummaries) {\n    // Aggregate overall data for each player\n    let overallData = []\n\n     Object.values(playerSummaries).forEach(playerSummary => {\n        overallData.push({\n            player: playerSummary.player,\n            ...aggregateOverallData(playerSummary.opponents)\n        })\n    });\n\n    // Sort it by winPercentage desc\n    overallData.sort((a, b) => b.winPercentage - a.winPercentage);\n    // Create the leaderboard HTML string\n    let leaderboardHTML = `\n        <h2>Leaderboard</h2>\n        <table class=\"summary-table\">\n            <thead>\n                <tr>\n                    <th>Player</th>\n                    <th>Total Games</th>\n                    <th>Wins</th>\n                    <th>Losses</th>\n                    <th>Win Percentage</th>\n                    <th>Winning Trend</th>\n                </tr>\n            </thead>\n            <tbody>\n    `;\n\n    // Iterate over each player's overall data to populate the leaderboard rows\n    overallData.forEach(playerData => {\n        leaderboardHTML += `\n            <tr>\n                <td>${playerData.player}</td>\n                <td>${playerData.totalGames}</td>\n                <td>${playerData.totalWins}</td>\n                <td>${playerData.totalLosses}</td>\n                <td>${playerData.winPercentage}%</td>\n                <td>\n                    <div class=\"bar\" style=\"--win-percentage: ${playerData.winPercentage}%;\">\n                        <div class=\"bar-fill\"></div>\n                    </div>\n                </td>\n            </tr>\n        `;\n    });\n\n    // Close the HTML table\n    leaderboardHTML += `\n            </tbody>\n        </table>\n    `;\n\n    // Return the generated leaderboard HTML\n    return leaderboardHTML;\n}\n\n\nfunction updatePlayerOptions() {\n    const player1Select = document.getElementById('player1');\n    const player2Select = document.getElementById('player2');\n    const player1Value = player1Select.value;\n    const player2Value = player2Select.value;\n\n    const allOptions = ['Akash', 'Anurag', 'Bumbu', 'Karan', 'Manu', 'Rishabh', 'Sabari'];\n\n    player1Select.innerHTML = '<option value=\"\">Select Player 1</option>';\n    player2Select.innerHTML = '<option value=\"\">Select Player 2</option>';\n\n    allOptions.forEach(player => {\n        if (player !== player2Value) {\n            player1Select.innerHTML += `<option value=\"${player}\">${player}</option>`;\n        }\n        if (player !== player1Value) {\n            player2Select.innerHTML += `<option value=\"${player}\">${player}</option>`;\n        }\n    });\n\n    player1Select.value = player1Value;\n    player2Select.value = player2Value;\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.getElementById('player1').addEventListener('change', updatePlayerOptions);\n    document.getElementById('player2').addEventListener('change', updatePlayerOptions);\n\n// Function to handle form submission\n    document.getElementById(\"gameForm\").addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n\n        let player1Name = formData.get(\"player1\")\n        let player2Name = formData.get(\"player2\")\n        let score1 = parseInt(formData.get(\"score1\"))\n        let score2 = parseInt(formData.get(\"score2\"))\n\n        const gameData = {\n            date: formData.get(\"date\"),\n            player1: player1Name,\n            player2: player2Name,\n            score: {\n                player1: score1,\n                player2: score2\n            },\n            winner: score1 > score2 ? player1Name : player2Name\n        };\n        // Call function to add game record\n        addGameRecord(gameData);\n\n        // Clear form fields after submission\n        e.target.reset();\n    });\n\n    // Initialize fetch functions\n    getGameRecords();\n\n    getGameSummary();\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/ticker.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/ticker.js"]();
/******/ 	
/******/ })()
;