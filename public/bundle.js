/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/ticker.js":
/*!**************************!*\
  !*** ./public/ticker.js ***!
  \**************************/
/***/ (() => {

eval("\n// Function to handle form submission and add game record\nasync function handleSubmit(event) {\n  event.preventDefault();\n\n  const form = event.target;\n  const date = form.date.value;\n  const player1 = form.player1.value;\n  const player2 = form.player2.value;\n  const scorePlayer1 = parseInt(form.scorePlayer1.value);\n  const scorePlayer2 = parseInt(form.scorePlayer2.value);\n\n  if (isNaN(scorePlayer1) || isNaN(scorePlayer2)) {\n    alert('Please enter valid scores.');\n    return;\n  }\n\n  const winner = (scorePlayer1 > scorePlayer2) ? player1 : player2;\n\n  try {\n    // Call the Firebase Function to add the game record\n    await addGameRecord(date, player1, player2, scorePlayer1, scorePlayer2, winner);\n\n    // Refresh the scoreboard after adding the game record\n    await loadScoreBoard();\n  } catch (error) {\n    console.error('Failed to add game record:', error.message);\n  }\n}\n\n// Function to call the Firebase Function and add a new game record\nasync function addGameRecord(date, player1, player2, scorePlayer1, scorePlayer2, winner) {\n  try {\n    const response = await fetch('/addGameRecord', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        date: date,\n        player1: player1,\n        player2: player2,\n        scorePlayer1: scorePlayer1,\n        scorePlayer2: scorePlayer2,\n        winner: winner\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to add game record.');\n    }\n\n    const data = await response.json();\n    console.log('Game record added successfully:', data);\n  } catch (error) {\n    console.error('Error adding game record:', error.message);\n    throw error;\n  }\n}\n\n\n// Function to retrieve game records from Firebase Function\nasync function loadScoreBoard() {\n  try {\n    const response = await fetch('/getGameRecords', {\n      // Optional: If you have added a security check for the API key\n      // headers: {\n      //   'Authorization': 'YOUR_API_KEY'\n      // }\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch game records.');\n    }\n\n    const data = await response.json();\n    const scoreBoard = document.getElementById('score-board');\n    scoreBoard.innerHTML = '';\n\n    data.sort((a, b) => {\n      // Sort by date (oldest to newest)\n      const dateA = new Date(a.date);\n      const dateB = new Date(b.date);\n      if (dateA < dateB) return -1;\n      if (dateA > dateB) return 1;\n\n      // If dates are equal, sort by winner's name\n      if (a.winner < b.winner) return -1;\n      if (a.winner > b.winner) return 1;\n\n      // If both date and winner's name are equal, maintain original order\n      return 0;\n    });\n\n    data.forEach((game) => {\n      const row = document.createElement('tr');\n      row.innerHTML = `\n        <td>${game.date}</td>\n        <td>${game.player1}</td>\n        <td>${game.player2}</td>\n        <td>${game.scorePlayer1}</td>\n        <td>${game.scorePlayer2}</td>\n        <td class=\"winner\">${game.winner}</td>\n      `;\n\n      if (game.winner === game.player1) {\n        row.querySelector(':nth-child(2)').style.color = 'green'; // Player 1 is the winner\n        row.querySelector(':nth-child(3)').style.color = 'red'; // Player 2 is the loser\n      } else if (game.winner === game.player2) {\n        row.querySelector(':nth-child(2)').style.color = 'red'; // Player 1 is the loser\n        row.querySelector(':nth-child(3)').style.color = 'green'; // Player 2 is the winner\n      }\n\n      scoreBoard.appendChild(row);\n    });\n\n    console.log('Game records loaded successfully:', data);\n  } catch (error) {\n    console.error('Error fetching game records:', error.message);\n  }\n}\n\n// Attach the handleSubmit function to the form submit event\ndocument.getElementById('game-form').addEventListener('submit', handleSubmit);\n\n// Load the scoreboard on page load\nloadScoreBoard();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvdGlja2VyLmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsY0FBYyxVQUFVO0FBQ3hCLGNBQWMsYUFBYTtBQUMzQixjQUFjLGFBQWE7QUFDM0IsY0FBYyxrQkFBa0I7QUFDaEMsY0FBYyxrQkFBa0I7QUFDaEMsNkJBQTZCLFlBQVk7QUFDekM7O0FBRUE7QUFDQSxrRUFBa0U7QUFDbEUsZ0VBQWdFO0FBQ2hFLFFBQVE7QUFDUixnRUFBZ0U7QUFDaEUsa0VBQWtFO0FBQ2xFOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcHVibGljL3RpY2tlci5qcz8zYmRjIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLy8gRnVuY3Rpb24gdG8gaGFuZGxlIGZvcm0gc3VibWlzc2lvbiBhbmQgYWRkIGdhbWUgcmVjb3JkXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVTdWJtaXQoZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICBjb25zdCBmb3JtID0gZXZlbnQudGFyZ2V0O1xuICBjb25zdCBkYXRlID0gZm9ybS5kYXRlLnZhbHVlO1xuICBjb25zdCBwbGF5ZXIxID0gZm9ybS5wbGF5ZXIxLnZhbHVlO1xuICBjb25zdCBwbGF5ZXIyID0gZm9ybS5wbGF5ZXIyLnZhbHVlO1xuICBjb25zdCBzY29yZVBsYXllcjEgPSBwYXJzZUludChmb3JtLnNjb3JlUGxheWVyMS52YWx1ZSk7XG4gIGNvbnN0IHNjb3JlUGxheWVyMiA9IHBhcnNlSW50KGZvcm0uc2NvcmVQbGF5ZXIyLnZhbHVlKTtcblxuICBpZiAoaXNOYU4oc2NvcmVQbGF5ZXIxKSB8fCBpc05hTihzY29yZVBsYXllcjIpKSB7XG4gICAgYWxlcnQoJ1BsZWFzZSBlbnRlciB2YWxpZCBzY29yZXMuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgd2lubmVyID0gKHNjb3JlUGxheWVyMSA+IHNjb3JlUGxheWVyMikgPyBwbGF5ZXIxIDogcGxheWVyMjtcblxuICB0cnkge1xuICAgIC8vIENhbGwgdGhlIEZpcmViYXNlIEZ1bmN0aW9uIHRvIGFkZCB0aGUgZ2FtZSByZWNvcmRcbiAgICBhd2FpdCBhZGRHYW1lUmVjb3JkKGRhdGUsIHBsYXllcjEsIHBsYXllcjIsIHNjb3JlUGxheWVyMSwgc2NvcmVQbGF5ZXIyLCB3aW5uZXIpO1xuXG4gICAgLy8gUmVmcmVzaCB0aGUgc2NvcmVib2FyZCBhZnRlciBhZGRpbmcgdGhlIGdhbWUgcmVjb3JkXG4gICAgYXdhaXQgbG9hZFNjb3JlQm9hcmQoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gYWRkIGdhbWUgcmVjb3JkOicsIGVycm9yLm1lc3NhZ2UpO1xuICB9XG59XG5cbi8vIEZ1bmN0aW9uIHRvIGNhbGwgdGhlIEZpcmViYXNlIEZ1bmN0aW9uIGFuZCBhZGQgYSBuZXcgZ2FtZSByZWNvcmRcbmFzeW5jIGZ1bmN0aW9uIGFkZEdhbWVSZWNvcmQoZGF0ZSwgcGxheWVyMSwgcGxheWVyMiwgc2NvcmVQbGF5ZXIxLCBzY29yZVBsYXllcjIsIHdpbm5lcikge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hZGRHYW1lUmVjb3JkJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGRhdGU6IGRhdGUsXG4gICAgICAgIHBsYXllcjE6IHBsYXllcjEsXG4gICAgICAgIHBsYXllcjI6IHBsYXllcjIsXG4gICAgICAgIHNjb3JlUGxheWVyMTogc2NvcmVQbGF5ZXIxLFxuICAgICAgICBzY29yZVBsYXllcjI6IHNjb3JlUGxheWVyMixcbiAgICAgICAgd2lubmVyOiB3aW5uZXJcbiAgICAgIH0pXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBhZGQgZ2FtZSByZWNvcmQuJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBjb25zb2xlLmxvZygnR2FtZSByZWNvcmQgYWRkZWQgc3VjY2Vzc2Z1bGx5OicsIGRhdGEpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyBnYW1lIHJlY29yZDonLCBlcnJvci5tZXNzYWdlKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5cbi8vIEZ1bmN0aW9uIHRvIHJldHJpZXZlIGdhbWUgcmVjb3JkcyBmcm9tIEZpcmViYXNlIEZ1bmN0aW9uXG5hc3luYyBmdW5jdGlvbiBsb2FkU2NvcmVCb2FyZCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvZ2V0R2FtZVJlY29yZHMnLCB7XG4gICAgICAvLyBPcHRpb25hbDogSWYgeW91IGhhdmUgYWRkZWQgYSBzZWN1cml0eSBjaGVjayBmb3IgdGhlIEFQSSBrZXlcbiAgICAgIC8vIGhlYWRlcnM6IHtcbiAgICAgIC8vICAgJ0F1dGhvcml6YXRpb24nOiAnWU9VUl9BUElfS0VZJ1xuICAgICAgLy8gfVxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggZ2FtZSByZWNvcmRzLicpO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgY29uc3Qgc2NvcmVCb2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY29yZS1ib2FyZCcpO1xuICAgIHNjb3JlQm9hcmQuaW5uZXJIVE1MID0gJyc7XG5cbiAgICBkYXRhLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIC8vIFNvcnQgYnkgZGF0ZSAob2xkZXN0IHRvIG5ld2VzdClcbiAgICAgIGNvbnN0IGRhdGVBID0gbmV3IERhdGUoYS5kYXRlKTtcbiAgICAgIGNvbnN0IGRhdGVCID0gbmV3IERhdGUoYi5kYXRlKTtcbiAgICAgIGlmIChkYXRlQSA8IGRhdGVCKSByZXR1cm4gLTE7XG4gICAgICBpZiAoZGF0ZUEgPiBkYXRlQikgcmV0dXJuIDE7XG5cbiAgICAgIC8vIElmIGRhdGVzIGFyZSBlcXVhbCwgc29ydCBieSB3aW5uZXIncyBuYW1lXG4gICAgICBpZiAoYS53aW5uZXIgPCBiLndpbm5lcikgcmV0dXJuIC0xO1xuICAgICAgaWYgKGEud2lubmVyID4gYi53aW5uZXIpIHJldHVybiAxO1xuXG4gICAgICAvLyBJZiBib3RoIGRhdGUgYW5kIHdpbm5lcidzIG5hbWUgYXJlIGVxdWFsLCBtYWludGFpbiBvcmlnaW5hbCBvcmRlclxuICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG5cbiAgICBkYXRhLmZvckVhY2goKGdhbWUpID0+IHtcbiAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICByb3cuaW5uZXJIVE1MID0gYFxuICAgICAgICA8dGQ+JHtnYW1lLmRhdGV9PC90ZD5cbiAgICAgICAgPHRkPiR7Z2FtZS5wbGF5ZXIxfTwvdGQ+XG4gICAgICAgIDx0ZD4ke2dhbWUucGxheWVyMn08L3RkPlxuICAgICAgICA8dGQ+JHtnYW1lLnNjb3JlUGxheWVyMX08L3RkPlxuICAgICAgICA8dGQ+JHtnYW1lLnNjb3JlUGxheWVyMn08L3RkPlxuICAgICAgICA8dGQgY2xhc3M9XCJ3aW5uZXJcIj4ke2dhbWUud2lubmVyfTwvdGQ+XG4gICAgICBgO1xuXG4gICAgICBpZiAoZ2FtZS53aW5uZXIgPT09IGdhbWUucGxheWVyMSkge1xuICAgICAgICByb3cucXVlcnlTZWxlY3RvcignOm50aC1jaGlsZCgyKScpLnN0eWxlLmNvbG9yID0gJ2dyZWVuJzsgLy8gUGxheWVyIDEgaXMgdGhlIHdpbm5lclxuICAgICAgICByb3cucXVlcnlTZWxlY3RvcignOm50aC1jaGlsZCgzKScpLnN0eWxlLmNvbG9yID0gJ3JlZCc7IC8vIFBsYXllciAyIGlzIHRoZSBsb3NlclxuICAgICAgfSBlbHNlIGlmIChnYW1lLndpbm5lciA9PT0gZ2FtZS5wbGF5ZXIyKSB7XG4gICAgICAgIHJvdy5xdWVyeVNlbGVjdG9yKCc6bnRoLWNoaWxkKDIpJykuc3R5bGUuY29sb3IgPSAncmVkJzsgLy8gUGxheWVyIDEgaXMgdGhlIGxvc2VyXG4gICAgICAgIHJvdy5xdWVyeVNlbGVjdG9yKCc6bnRoLWNoaWxkKDMpJykuc3R5bGUuY29sb3IgPSAnZ3JlZW4nOyAvLyBQbGF5ZXIgMiBpcyB0aGUgd2lubmVyXG4gICAgICB9XG5cbiAgICAgIHNjb3JlQm9hcmQuYXBwZW5kQ2hpbGQocm93KTtcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKCdHYW1lIHJlY29yZHMgbG9hZGVkIHN1Y2Nlc3NmdWxseTonLCBkYXRhKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBnYW1lIHJlY29yZHM6JywgZXJyb3IubWVzc2FnZSk7XG4gIH1cbn1cblxuLy8gQXR0YWNoIHRoZSBoYW5kbGVTdWJtaXQgZnVuY3Rpb24gdG8gdGhlIGZvcm0gc3VibWl0IGV2ZW50XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1mb3JtJykuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlU3VibWl0KTtcblxuLy8gTG9hZCB0aGUgc2NvcmVib2FyZCBvbiBwYWdlIGxvYWRcbmxvYWRTY29yZUJvYXJkKCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./public/ticker.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/ticker.js"]();
/******/ 	
/******/ })()
;