(()=>{var __webpack_modules__={24:()=>{eval("\n// Function to handle form submission and add game record\nasync function handleSubmit(event) {\n  event.preventDefault();\n\n  const form = event.target;\n  const date = form.date.value;\n  const player1 = form.player1.value;\n  const player2 = form.player2.value;\n  const scorePlayer1 = parseInt(form.scorePlayer1.value);\n  const scorePlayer2 = parseInt(form.scorePlayer2.value);\n\n  if (isNaN(scorePlayer1) || isNaN(scorePlayer2)) {\n    alert('Please enter valid scores.');\n    return;\n  }\n\n  const winner = (scorePlayer1 > scorePlayer2) ? player1 : player2;\n\n  try {\n    // Call the Firebase Function to add the game record\n    await addGameRecord(date, player1, player2, scorePlayer1, scorePlayer2, winner);\n\n    // Refresh the scoreboard after adding the game record\n    await loadScoreBoard();\n  } catch (error) {\n    console.error('Failed to add game record:', error.message);\n  }\n}\n\n// Function to call the Firebase Function and add a new game record\nasync function addGameRecord(date, player1, player2, scorePlayer1, scorePlayer2, winner) {\n  try {\n    const response = await fetch('/addGameRecord', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        date: date,\n        player1: player1,\n        player2: player2,\n        scorePlayer1: scorePlayer1,\n        scorePlayer2: scorePlayer2,\n        winner: winner\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to add game record.');\n    }\n\n    const data = await response.json();\n    console.log('Game record added successfully:', data);\n  } catch (error) {\n    console.error('Error adding game record:', error.message);\n    throw error;\n  }\n}\n\n\n// Function to retrieve game records from Firebase Function\nasync function loadScoreBoard() {\n  try {\n    const response = await fetch('/getGameRecords', {\n      // Optional: If you have added a security check for the API key\n      // headers: {\n      //   'Authorization': 'YOUR_API_KEY'\n      // }\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch game records.');\n    }\n\n    const data = await response.json();\n    const scoreBoard = document.getElementById('score-board');\n    scoreBoard.innerHTML = '';\n\n    data.forEach((game) => {\n      const row = document.createElement('tr');\n      row.innerHTML = `\n        <td>${game.date}</td>\n        <td>${game.player1}</td>\n        <td>${game.player2}</td>\n        <td>${game.scorePlayer1}</td>\n        <td>${game.scorePlayer2}</td>\n        <td class=\"winner\">${game.winner}</td>\n      `;\n\n      if (game.winner === game.player1) {\n        row.querySelector(':nth-child(2)').style.color = 'green'; // Player 1 is the winner\n        row.querySelector(':nth-child(3)').style.color = 'red'; // Player 2 is the loser\n      } else if (game.winner === game.player2) {\n        row.querySelector(':nth-child(2)').style.color = 'red'; // Player 1 is the loser\n        row.querySelector(':nth-child(3)').style.color = 'green'; // Player 2 is the winner\n      }\n\n      scoreBoard.appendChild(row);\n    });\n\n    console.log('Game records loaded successfully:', data);\n  } catch (error) {\n    console.error('Error fetching game records:', error.message);\n  }\n}\n\n// Attach the handleSubmit function to the form submit event\ndocument.getElementById('game-form').addEventListener('submit', handleSubmit);\n\n// Load the scoreboard on page load\nloadScoreBoard();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxVQUFVO0FBQ3hCLGNBQWMsYUFBYTtBQUMzQixjQUFjLGFBQWE7QUFDM0IsY0FBYyxrQkFBa0I7QUFDaEMsY0FBYyxrQkFBa0I7QUFDaEMsNkJBQTZCLFlBQVk7QUFDekM7O0FBRUE7QUFDQSxrRUFBa0U7QUFDbEUsZ0VBQWdFO0FBQ2hFLFFBQVE7QUFDUixnRUFBZ0U7QUFDaEUsa0VBQWtFO0FBQ2xFOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2NvcmV0aWNrZXIvLi9wdWJsaWMvdGlja2VyLmpzPzNiZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBGdW5jdGlvbiB0byBoYW5kbGUgZm9ybSBzdWJtaXNzaW9uIGFuZCBhZGQgZ2FtZSByZWNvcmRcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIGNvbnN0IGZvcm0gPSBldmVudC50YXJnZXQ7XG4gIGNvbnN0IGRhdGUgPSBmb3JtLmRhdGUudmFsdWU7XG4gIGNvbnN0IHBsYXllcjEgPSBmb3JtLnBsYXllcjEudmFsdWU7XG4gIGNvbnN0IHBsYXllcjIgPSBmb3JtLnBsYXllcjIudmFsdWU7XG4gIGNvbnN0IHNjb3JlUGxheWVyMSA9IHBhcnNlSW50KGZvcm0uc2NvcmVQbGF5ZXIxLnZhbHVlKTtcbiAgY29uc3Qgc2NvcmVQbGF5ZXIyID0gcGFyc2VJbnQoZm9ybS5zY29yZVBsYXllcjIudmFsdWUpO1xuXG4gIGlmIChpc05hTihzY29yZVBsYXllcjEpIHx8IGlzTmFOKHNjb3JlUGxheWVyMikpIHtcbiAgICBhbGVydCgnUGxlYXNlIGVudGVyIHZhbGlkIHNjb3Jlcy4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB3aW5uZXIgPSAoc2NvcmVQbGF5ZXIxID4gc2NvcmVQbGF5ZXIyKSA/IHBsYXllcjEgOiBwbGF5ZXIyO1xuXG4gIHRyeSB7XG4gICAgLy8gQ2FsbCB0aGUgRmlyZWJhc2UgRnVuY3Rpb24gdG8gYWRkIHRoZSBnYW1lIHJlY29yZFxuICAgIGF3YWl0IGFkZEdhbWVSZWNvcmQoZGF0ZSwgcGxheWVyMSwgcGxheWVyMiwgc2NvcmVQbGF5ZXIxLCBzY29yZVBsYXllcjIsIHdpbm5lcik7XG5cbiAgICAvLyBSZWZyZXNoIHRoZSBzY29yZWJvYXJkIGFmdGVyIGFkZGluZyB0aGUgZ2FtZSByZWNvcmRcbiAgICBhd2FpdCBsb2FkU2NvcmVCb2FyZCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBhZGQgZ2FtZSByZWNvcmQ6JywgZXJyb3IubWVzc2FnZSk7XG4gIH1cbn1cblxuLy8gRnVuY3Rpb24gdG8gY2FsbCB0aGUgRmlyZWJhc2UgRnVuY3Rpb24gYW5kIGFkZCBhIG5ldyBnYW1lIHJlY29yZFxuYXN5bmMgZnVuY3Rpb24gYWRkR2FtZVJlY29yZChkYXRlLCBwbGF5ZXIxLCBwbGF5ZXIyLCBzY29yZVBsYXllcjEsIHNjb3JlUGxheWVyMiwgd2lubmVyKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FkZEdhbWVSZWNvcmQnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgcGxheWVyMTogcGxheWVyMSxcbiAgICAgICAgcGxheWVyMjogcGxheWVyMixcbiAgICAgICAgc2NvcmVQbGF5ZXIxOiBzY29yZVBsYXllcjEsXG4gICAgICAgIHNjb3JlUGxheWVyMjogc2NvcmVQbGF5ZXIyLFxuICAgICAgICB3aW5uZXI6IHdpbm5lclxuICAgICAgfSlcbiAgICB9KTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGFkZCBnYW1lIHJlY29yZC4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGNvbnNvbGUubG9nKCdHYW1lIHJlY29yZCBhZGRlZCBzdWNjZXNzZnVsbHk6JywgZGF0YSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgYWRkaW5nIGdhbWUgcmVjb3JkOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cblxuLy8gRnVuY3Rpb24gdG8gcmV0cmlldmUgZ2FtZSByZWNvcmRzIGZyb20gRmlyZWJhc2UgRnVuY3Rpb25cbmFzeW5jIGZ1bmN0aW9uIGxvYWRTY29yZUJvYXJkKCkge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9nZXRHYW1lUmVjb3JkcycsIHtcbiAgICAgIC8vIE9wdGlvbmFsOiBJZiB5b3UgaGF2ZSBhZGRlZCBhIHNlY3VyaXR5IGNoZWNrIGZvciB0aGUgQVBJIGtleVxuICAgICAgLy8gaGVhZGVyczoge1xuICAgICAgLy8gICAnQXV0aG9yaXphdGlvbic6ICdZT1VSX0FQSV9LRVknXG4gICAgICAvLyB9XG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBnYW1lIHJlY29yZHMuJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBjb25zdCBzY29yZUJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Njb3JlLWJvYXJkJyk7XG4gICAgc2NvcmVCb2FyZC5pbm5lckhUTUwgPSAnJztcblxuICAgIGRhdGEuZm9yRWFjaCgoZ2FtZSkgPT4ge1xuICAgICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgIHJvdy5pbm5lckhUTUwgPSBgXG4gICAgICAgIDx0ZD4ke2dhbWUuZGF0ZX08L3RkPlxuICAgICAgICA8dGQ+JHtnYW1lLnBsYXllcjF9PC90ZD5cbiAgICAgICAgPHRkPiR7Z2FtZS5wbGF5ZXIyfTwvdGQ+XG4gICAgICAgIDx0ZD4ke2dhbWUuc2NvcmVQbGF5ZXIxfTwvdGQ+XG4gICAgICAgIDx0ZD4ke2dhbWUuc2NvcmVQbGF5ZXIyfTwvdGQ+XG4gICAgICAgIDx0ZCBjbGFzcz1cIndpbm5lclwiPiR7Z2FtZS53aW5uZXJ9PC90ZD5cbiAgICAgIGA7XG5cbiAgICAgIGlmIChnYW1lLndpbm5lciA9PT0gZ2FtZS5wbGF5ZXIxKSB7XG4gICAgICAgIHJvdy5xdWVyeVNlbGVjdG9yKCc6bnRoLWNoaWxkKDIpJykuc3R5bGUuY29sb3IgPSAnZ3JlZW4nOyAvLyBQbGF5ZXIgMSBpcyB0aGUgd2lubmVyXG4gICAgICAgIHJvdy5xdWVyeVNlbGVjdG9yKCc6bnRoLWNoaWxkKDMpJykuc3R5bGUuY29sb3IgPSAncmVkJzsgLy8gUGxheWVyIDIgaXMgdGhlIGxvc2VyXG4gICAgICB9IGVsc2UgaWYgKGdhbWUud2lubmVyID09PSBnYW1lLnBsYXllcjIpIHtcbiAgICAgICAgcm93LnF1ZXJ5U2VsZWN0b3IoJzpudGgtY2hpbGQoMiknKS5zdHlsZS5jb2xvciA9ICdyZWQnOyAvLyBQbGF5ZXIgMSBpcyB0aGUgbG9zZXJcbiAgICAgICAgcm93LnF1ZXJ5U2VsZWN0b3IoJzpudGgtY2hpbGQoMyknKS5zdHlsZS5jb2xvciA9ICdncmVlbic7IC8vIFBsYXllciAyIGlzIHRoZSB3aW5uZXJcbiAgICAgIH1cblxuICAgICAgc2NvcmVCb2FyZC5hcHBlbmRDaGlsZChyb3cpO1xuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coJ0dhbWUgcmVjb3JkcyBsb2FkZWQgc3VjY2Vzc2Z1bGx5OicsIGRhdGEpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGdhbWUgcmVjb3JkczonLCBlcnJvci5tZXNzYWdlKTtcbiAgfVxufVxuXG4vLyBBdHRhY2ggdGhlIGhhbmRsZVN1Ym1pdCBmdW5jdGlvbiB0byB0aGUgZm9ybSBzdWJtaXQgZXZlbnRcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWZvcm0nKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBoYW5kbGVTdWJtaXQpO1xuXG4vLyBMb2FkIHRoZSBzY29yZWJvYXJkIG9uIHBhZ2UgbG9hZFxubG9hZFNjb3JlQm9hcmQoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n")}},__webpack_exports__={};__webpack_modules__[24]()})();
