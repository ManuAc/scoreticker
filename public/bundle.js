/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/ticker.js":
/*!**************************!*\
  !*** ./public/ticker.js ***!
  \**************************/
/***/ (() => {

eval("// Function to add a game record\nfunction addGameRecord(gameData) {\n    fetch('/addGameRecord', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(gameData),\n    })\n    .then(response => {\n        console.log(\"Response for addGameRecord from Firebase:\", response);\n        return response.json();\n    })\n    .then(data => {\n        console.log(data)\n        \n        // Reload other sections\n        filterGamesByYear(2025);\n    })\n    .catch(error => console.error('Error adding game record:', error));\n}\n\n// Function to get game records\nfunction getGameRecords(year) {\n    fetch(`/getGameRecords?year=${year}`)\n    .then(response => {\n        console.log(\"Response for getGameRecords from Firebase:\", response);\n        return response.json();\n    })\n    .then(data => {\n        const gameTableBody = document.getElementById('gameTable').getElementsByTagName('tbody')[0];\n        gameTableBody.innerHTML = '';\n        data.forEach(record => {\n            const row = gameTableBody.insertRow();\n\n            const dateCell = row.insertCell();\n            const player1Cell = row.insertCell();\n            const player2Cell = row.insertCell();\n            const score1Cell = row.insertCell();\n            const score2Cell = row.insertCell();\n            const winnerCell = row.insertCell();\n\n            dateCell.innerText = record.date;\n            player1Cell.innerText = record.player1;\n            player2Cell.innerText = record.player2;\n            score1Cell.innerText = record.score.player1;\n            score2Cell.innerText = record.score.player2;\n            winnerCell.innerText = record.winner;\n\n            // Add winner/loser styling\n            if (record.winner === record.player1) {\n                player1Cell.classList.add('winner');\n                player2Cell.classList.add('loser');\n                winnerCell.classList.add('winner');\n            } else {\n                player1Cell.classList.add('loser');\n                player2Cell.classList.add('winner');\n                winnerCell.classList.add('winner');\n            }\n\n            dateCell.setAttribute('data-label', 'Date');\n            player1Cell.setAttribute('data-label', 'Player 1');\n            player2Cell.setAttribute('data-label', 'Player 2');\n            score1Cell.setAttribute('data-label', 'Score P1');\n            score2Cell.setAttribute('data-label', 'Score P2');\n            winnerCell.setAttribute('data-label', 'Winner');\n        });\n    })\n    .catch(error => console.error('Error getting game records:', error));\n}\n\n// Function to get game summary\nfunction getGameSummary(year) {\n    // First get all games for last 10 calculation\n    Promise.all([\n        fetch(`/getSummary?year=${year}`).then(response => response.json()),\n        fetch(`/getGameRecords?year=`).then(response => response.json())\n    ])\n    .then(([summaryData, allGames]) => {\n        const processedSummaryData = {};\n        summaryData.forEach(record => {\n            if (!processedSummaryData[record.player]) {\n                processedSummaryData[record.player] = {\n                    player: record.player,\n                    opponents: []\n                };\n            }\n            processedSummaryData[record.player].opponents.push({\n                name: record.opponent,\n                gamesPlayed: record.gamesPlayed,\n                wins: record.wins,\n                losses: record.losses\n            });\n        });\n\n        const summaryGrid = document.getElementById(\"summaryGrid\");\n        summaryGrid.innerHTML = \"\";\n\n        // Add the leaderboard\n        const leaderboardHTML = generateLeaderboard(processedSummaryData, allGames);\n        const leaderboardHTMLDiv = document.createElement(\"div\");\n        leaderboardHTMLDiv.classList.add(\"player-summary\");\n        leaderboardHTMLDiv.innerHTML = leaderboardHTML;\n        summaryGrid.appendChild(leaderboardHTMLDiv);\n\n        // Add the player tabs\n        const playerTabs = document.getElementById(\"playerTabs\");\n        const tabsContainer = document.createElement(\"div\");\n        tabsContainer.classList.add(\"player-tabs-container\");\n        \n        // Create tabs header\n        const tabsHeader = document.createElement(\"div\");\n        tabsHeader.classList.add(\"tabs-header\");\n        tabsHeader.innerHTML = Object.values(processedSummaryData).map((playerSummary, index) => `\n            <button class=\"tab-button ${index === 0 ? 'active' : ''}\" \n                    data-player=\"${playerSummary.player}\">\n                ${playerSummary.player}\n            </button>\n        `).join('');\n\n        // Create tabs content\n        const tabsContent = document.createElement(\"div\");\n        tabsContent.classList.add(\"tabs-content\");\n        tabsContent.innerHTML = Object.values(processedSummaryData).map((playerSummary, index) => `\n            <div class=\"tab-content ${index === 0 ? 'active' : ''}\" \n                 id=\"tab-${playerSummary.player}\">\n                <table class=\"summary-table\">\n                    <thead>\n                        <tr>\n                            <th>Opponent</th>\n                            <th>Games</th>\n                            <th>Wins</th>\n                            <th>Losses</th>\n                            <th>Win %</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${playerSummary.opponents.map(opponent => `\n                            <tr>\n                                <td>${opponent.name}</td>\n                                <td>${opponent.gamesPlayed}</td>\n                                <td>${opponent.wins}</td>\n                                <td>${opponent.losses}</td>\n                                <td>${(opponent.wins / opponent.gamesPlayed * 100).toFixed(2)}%</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n        `).join('');\n\n        tabsContainer.appendChild(tabsHeader);\n        tabsContainer.appendChild(tabsContent);\n        playerTabs.innerHTML = ''; // Clear existing content\n        playerTabs.appendChild(tabsContainer);\n\n        // Add click handlers for tabs\n        document.querySelectorAll('.tab-button').forEach(button => {\n            button.addEventListener('click', () => {\n                document.querySelectorAll('.tab-button').forEach(btn => \n                    btn.classList.remove('active'));\n                document.querySelectorAll('.tab-content').forEach(content => \n                    content.classList.remove('active'));\n                \n                button.classList.add('active');\n                document.getElementById(`tab-${button.dataset.player}`).classList.add('active');\n            });\n        });\n    })\n    .catch(error => console.error('Error getting game summary:', error));\n}\n\n// Add this new function to calculate last 10 games performance\nfunction getLastTenGamesPerformance(player, allGames) {\n    // Get all games for this player (either as player1 or player2)\n    const playerGames = allGames\n        .filter(game => game.player1 === player || game.player2 === player)\n        .sort((a, b) => new Date(b.date) - new Date(a.date)) // Sort by date descending\n        .slice(0, 10); // Get last 10 games\n\n    // Count wins in these games\n    const wins = playerGames.filter(game => game.winner === player).length;\n    return `${wins}/${playerGames.length}`; // Format as \"wins/games\"\n}\n\n// Update the generateLeaderboard function\nfunction generateLeaderboard(playerSummaries, allGames) {\n    let overallData = [];\n\n    Object.values(playerSummaries).forEach(playerSummary => {\n        overallData.push({\n            player: playerSummary.player,\n            ...aggregateOverallData(playerSummary.opponents),\n            lastTen: getLastTenGamesPerformance(playerSummary.player, allGames)\n        });\n    });\n\n    // Sort by winPercentage desc\n    overallData.sort((a, b) => b.winPercentage - a.winPercentage);\n\n    let leaderboardHTML = `\n        <h2><i class=\"fas fa-crown\"></i> Power Rankings</h2>\n        <table class=\"summary-table\">\n            <thead>\n                <tr>\n                    <th>Player</th>\n                    <th>Games</th>\n                    <th>Wins</th>\n                    <th>Losses</th>\n                    <th>Win %</th>\n                    <th>Last 10</th>\n                </tr>\n            </thead>\n            <tbody>\n    `;\n\n    overallData.forEach((playerData, index) => {\n        const rankClass = index === 0 ? 'rank-gold' : \n                         index === 1 ? 'rank-silver' : \n                         index === 2 ? 'rank-bronze' : '';\n        const medalClass = index === 0 ? 'medal-gold' : \n                          index === 1 ? 'medal-silver' : \n                          index === 2 ? 'medal-bronze' : '';\n        \n        leaderboardHTML += `\n            <tr class=\"${rankClass}\">\n                <td data-label=\"Player\"><span class=\"${medalClass}\">${playerData.player}</span></td>\n                <td data-label=\"Games\">${playerData.totalGames}</td>\n                <td data-label=\"Wins\">${playerData.totalWins}</td>\n                <td data-label=\"Losses\">${playerData.totalLosses}</td>\n                <td data-label=\"Win %\">${playerData.winPercentage}%</td>\n                <td data-label=\"Last 10\">${playerData.lastTen}</td>\n            </tr>\n        `;\n    });\n\n    leaderboardHTML += `\n            </tbody>\n        </table>\n    `;\n\n    return leaderboardHTML;\n}\n\n// Assuming playerSummaries is an array containing player summary objects with per-opponent data\n// Function to aggregate per-opponent data to calculate overall statistics\nfunction aggregateOverallData(playerSummaries) {\n    // Initialize variables to store overall statistics\n    let totalGames = 0;\n    let totalWins = 0;\n    let totalLosses = 0;\n\n    // Iterate over each player summary to aggregate data\n    playerSummaries.forEach(playerSummary => {\n        // Increment total games\n        totalGames += playerSummary.gamesPlayed;\n\n        // Increment total wins\n        totalWins += playerSummary.wins;\n\n        // Increment total losses\n        totalLosses += playerSummary.losses;\n    });\n\n    // Calculate overall win percentage\n    const winPercentage = totalGames > 0 ? ((totalWins / totalGames) * 100).toFixed(2) : 0;\n\n    // Return an object containing the aggregated overall data\n    return {\n        totalGames,\n        totalWins,\n        totalLosses,\n        winPercentage\n    };\n}\n\nfunction filterGamesByYear(year) {\n    const yearParam = year >= 2025 ? year : '';\n    getGameRecords(yearParam);\n    getGameSummary(yearParam);\n\n    // Update active state of year buttons\n    document.getElementById('year2025').classList.toggle('active', year === 2025);\n    document.getElementById('year2024').classList.toggle('active', year === 2024);\n}\n\nfunction updatePlayerOptions() {\n    const player1Select = document.getElementById('player1');\n    const player2Select = document.getElementById('player2');\n    const player1Value = player1Select.value;\n    const player2Value = player2Select.value;\n\n    // Save to localStorage when values change\n    if (player1Value) localStorage.setItem('lastPlayer1', player1Value);\n    if (player2Value) localStorage.setItem('lastPlayer2', player2Value);\n\n    const allOptions = ['Akash', 'Aditya', 'Anurag', 'Bumbu', 'Karan', 'Htike', 'Manu', 'Rishabh', 'Sabari'];\n\n    player1Select.innerHTML = '<option value=\"\">Select Player 1</option>';\n    player2Select.innerHTML = '<option value=\"\">Select Player 2</option>';\n\n    allOptions.forEach(player => {\n        if (player !== player2Value) {\n            player1Select.innerHTML += `<option value=\"${player}\">${player}</option>`;\n        }\n        if (player !== player1Value) {\n            player2Select.innerHTML += `<option value=\"${player}\">${player}</option>`;\n        }\n    });\n\n    player1Select.value = player1Value;\n    player2Select.value = player2Value;\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Set default date to today\n    const today = new Date().toISOString().split('T')[0];\n    document.getElementById('date').value = today;\n    \n    // Set default scores to 21\n    document.getElementById('score1').value = \"21\";\n    document.getElementById('score2').value = \"21\";\n    \n    // Get last selected players from localStorage\n    const lastPlayer1 = localStorage.getItem('lastPlayer1');\n    const lastPlayer2 = localStorage.getItem('lastPlayer2');\n    \n    if (lastPlayer1) document.getElementById('player1').value = lastPlayer1;\n    if (lastPlayer2) document.getElementById('player2').value = lastPlayer2;\n    \n    document.getElementById('player1').addEventListener('change', updatePlayerOptions);\n    document.getElementById('player2').addEventListener('change', updatePlayerOptions);\n\n    document.getElementById('year2025').addEventListener('click', () => filterGamesByYear(2025));\n    document.getElementById('year2024').addEventListener('click', () => filterGamesByYear(2024));\n\n// Function to handle form submission\n    document.getElementById(\"gameForm\").addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n\n        let player1Name = formData.get(\"player1\")\n        let player2Name = formData.get(\"player2\")\n        let score1 = parseInt(formData.get(\"score1\"))\n        let score2 = parseInt(formData.get(\"score2\"))\n\n        const gameData = {\n            date: formData.get(\"date\"),\n            player1: player1Name,\n            player2: player2Name,\n            score: {\n                player1: score1,\n                player2: score2\n            },\n            winner: score1 > score2 ? player1Name : player2Name\n        };\n        // Call function to add game record\n        addGameRecord(gameData);\n\n        // Clear form fields after submission\n        e.target.reset();\n    });\n\n    // Initialize fetch functions\n    filterGamesByYear(2025);\n\n    // Add year select handler\n    document.getElementById('yearSelect').addEventListener('change', (e) => {\n        filterGamesByYear(parseInt(e.target.value));\n    });\n\n    // Set initial year in dropdown\n    document.getElementById('yearSelect').value = \"2025\";\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/ticker.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/ticker.js"]();
/******/ 	
/******/ })()
;